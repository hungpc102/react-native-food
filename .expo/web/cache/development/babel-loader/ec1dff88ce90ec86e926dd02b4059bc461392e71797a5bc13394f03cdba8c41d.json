{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { getUserIdToStorage, getAccessTokenFromStorage } from \"../../utils/TokenStorage\";\nimport { apiUpdatePassword } from \"../../api/UserAPI\";\nimport axios from 'axios';\nimport { handleTokenRefresh } from \"../jwtService/jwtServices\";\nvar callCount = 0;\nexport var updatePassword = function () {\n  var _ref = _asyncToGenerator(function* (password, newPassword, confirmPassword, usePassword, setModalVisible) {\n    if (callCount < 2) {\n      callCount++;\n      if (!password || !newPassword || !confirmPassword) {\n        return alert('Vui lòng điền đầy đủ thông tin');\n      }\n      var userId = yield getUserIdToStorage();\n      var accessToken = yield getAccessTokenFromStorage();\n      yield axios.patch(apiUpdatePassword + userId, usePassword, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        var handleVerify = function () {\n          var _ref2 = _asyncToGenerator(function* () {\n            if (response.data.status === 401) {\n              yield handleTokenRefresh();\n              updatePassword(password, newPassword, confirmPassword, usePassword, setModalVisible);\n            } else {\n              console.log('Mật khẩu đã được cập nhật:', response.data);\n              callCount = 0;\n              alert('Đổi mật khẩu thành công');\n            }\n          });\n          return function handleVerify() {\n            return _ref2.apply(this, arguments);\n          };\n        }();\n        handleVerify();\n      }).catch(function (error) {\n        console.log('Lỗi khi cập nhật mật khẩu:', error);\n        alert('Lỗi đổi mật khẩu. Vui lòng điền đùng thông tin');\n      }).finally(function () {\n        setModalVisible(false);\n      });\n    } else {\n      alert('Lỗi đổi mật khẩu. Vui lòng đăng nhập lại');\n    }\n  });\n  return function updatePassword(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getUserIdToStorage","getAccessTokenFromStorage","apiUpdatePassword","axios","handleTokenRefresh","callCount","updatePassword","_ref","_asyncToGenerator","password","newPassword","confirmPassword","usePassword","setModalVisible","alert","userId","accessToken","patch","headers","Authorization","then","response","handleVerify","_ref2","data","status","console","log","apply","arguments","catch","error","finally","_x","_x2","_x3","_x4","_x5"],"sources":["/Users/chuduchung/Documents/doan-reactnative/react-native-app/react-native-food/services/userService.tsx/updatePasswordServices.tsx"],"sourcesContent":["import {getUserIdToStorage, getAccessTokenFromStorage} from '../../utils/TokenStorage'\nimport {apiUpdatePassword} from '../../api/UserAPI'\nimport axios from 'axios'\nimport {handleTokenRefresh} from '../jwtService/jwtServices'\n\nlet callCount = 0\n\nexport  const updatePassword = async(password: string,newPassword: string,confirmPassword: string , usePassword:object, setModalVisible:(modalVisible:boolean)=> void ) => {\n    if(callCount < 2){\n      callCount++;\n\n      if(!password || !newPassword || !confirmPassword){\n        return alert('Vui lòng điền đầy đủ thông tin')\n      }\n      const userId = await getUserIdToStorage(); \n      const accessToken = await getAccessTokenFromStorage()\n\n      await axios.patch(apiUpdatePassword + userId, usePassword, { \n        headers : {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        }\n      })\n      .then (response => {\n        const handleVerify = async() => {\n          if(response.data.status === 401){\n            await handleTokenRefresh()\n            updatePassword(password, newPassword, confirmPassword,usePassword, setModalVisible )\n          }else{\n            console.log('Mật khẩu đã được cập nhật:', response.data);\n            callCount=0\n          alert('Đổi mật khẩu thành công')\n          }\n        }\n        handleVerify()\n      })\n      .catch(error => {   \n    \n          console.log('Lỗi khi cập nhật mật khẩu:', error);\n          alert('Lỗi đổi mật khẩu. Vui lòng điền đùng thông tin')\n\n      })\n      .finally(()=>{\n      setModalVisible(false)\n      });\n    } else{\n      alert('Lỗi đổi mật khẩu. Vui lòng đăng nhập lại')\n    }\n  }"],"mappings":";AAAA,SAAQA,kBAAkB,EAAEC,yBAAyB;AACrD,SAAQC,iBAAiB;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,kBAAkB;AAE1B,IAAIC,SAAS,GAAG,CAAC;AAEjB,OAAQ,IAAMC,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAMC,QAAgB,EAACC,WAAmB,EAACC,eAAuB,EAAGC,WAAkB,EAAEC,eAA6C,EAAM;IACvK,IAAGR,SAAS,GAAG,CAAC,EAAC;MACfA,SAAS,EAAE;MAEX,IAAG,CAACI,QAAQ,IAAI,CAACC,WAAW,IAAI,CAACC,eAAe,EAAC;QAC/C,OAAOG,KAAK,CAAC,gCAAgC,CAAC;MAChD;MACA,IAAMC,MAAM,SAASf,kBAAkB,CAAC,CAAC;MACzC,IAAMgB,WAAW,SAASf,yBAAyB,CAAC,CAAC;MAErD,MAAME,KAAK,CAACc,KAAK,CAACf,iBAAiB,GAAGa,MAAM,EAAEH,WAAW,EAAE;QACzDM,OAAO,EAAG;UACRC,aAAa,EAAG,UAASH,WAAY,EAAC;UACtC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC,CACDI,IAAI,CAAE,UAAAC,QAAQ,EAAI;QACjB,IAAMC,YAAY;UAAA,IAAAC,KAAA,GAAAf,iBAAA,CAAG,aAAW;YAC9B,IAAGa,QAAQ,CAACG,IAAI,CAACC,MAAM,KAAK,GAAG,EAAC;cAC9B,MAAMrB,kBAAkB,CAAC,CAAC;cAC1BE,cAAc,CAACG,QAAQ,EAAEC,WAAW,EAAEC,eAAe,EAACC,WAAW,EAAEC,eAAgB,CAAC;YACtF,CAAC,MAAI;cACHa,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEN,QAAQ,CAACG,IAAI,CAAC;cACxDnB,SAAS,GAAC,CAAC;cACbS,KAAK,CAAC,yBAAyB,CAAC;YAChC;UACF,CAAC;UAAA,gBATKQ,YAAYA,CAAA;YAAA,OAAAC,KAAA,CAAAK,KAAA,OAAAC,SAAA;UAAA;QAAA,GASjB;QACDP,YAAY,CAAC,CAAC;MAChB,CAAC,CAAC,CACDQ,KAAK,CAAC,UAAAC,KAAK,EAAI;QAEZL,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEI,KAAK,CAAC;QAChDjB,KAAK,CAAC,gDAAgD,CAAC;MAE3D,CAAC,CAAC,CACDkB,OAAO,CAAC,YAAI;QACbnB,eAAe,CAAC,KAAK,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,MAAK;MACJC,KAAK,CAAC,0CAA0C,CAAC;IACnD;EACF,CAAC;EAAA,gBAzCWR,cAAcA,CAAA2B,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAA9B,IAAA,CAAAqB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAyCzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}