{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { getLoginStatusToStorage, saveTokensToStorage, getAccessTokenFromStorage, getRefreshTokenFromStorage } from \"../../utils/TokenStorage\";\nimport axios from \"axios\";\nimport { userApiStatusLogin, userApiRefreshToken } from \"../../api/UserAPI\";\nimport { routeLogin } from \"./loginFunctions\";\nexport var saveLogin = function () {\n  var _ref = _asyncToGenerator(function* (setLoading, navigation) {\n    setLoading(true);\n    try {\n      var loginStatus = yield getLoginStatusToStorage();\n      if (loginStatus === 'true') {\n        yield verifyAccessTokenLogin(navigation);\n      }\n    } catch (_unused) {\n      console.log('Chưa ghi nhớ đăng nhập hoặc token không chính xác');\n    } finally {\n      setLoading(false);\n    }\n  });\n  return function saveLogin(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar verifyAccessTokenLogin = function () {\n  var _ref2 = _asyncToGenerator(function* (navigation) {\n    try {\n      var token = yield getAccessTokenFromStorage();\n      var response = yield axios.get(userApiStatusLogin, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      var statusLogin = response.data.statusLogin;\n      if (statusLogin) {\n        if (statusLogin === true) {\n          console.log('Có ghi nhớ đăng nhập');\n          var redirectTo = 'ButtonBar';\n          yield routeLogin(token, navigation, redirectTo);\n        }\n      } else {\n        yield handleTokenRefresh(navigation);\n      }\n    } catch (_unused2) {\n      console.log('lỗi đăng nhập');\n    }\n  });\n  return function verifyAccessTokenLogin(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar handleTokenRefresh = function () {\n  var _ref3 = _asyncToGenerator(function* (navigation) {\n    try {\n      var refreshToken = yield getRefreshTokenFromStorage();\n      var response = yield axios.post(userApiRefreshToken, {\n        refreshToken: refreshToken\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var accessToken = response.data.accessToken;\n      var newRefreshToken = response.data.refreshToken;\n      console.log('accessToken:', accessToken);\n      console.log('refreshToken:', newRefreshToken);\n      if (accessToken && newRefreshToken) {\n        saveTokensToStorage(accessToken, newRefreshToken);\n        var loginStatus = yield getLoginStatusToStorage();\n        yield verifyAccessTokenLogin(navigation);\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  });\n  return function handleTokenRefresh(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getLoginStatusToStorage","saveTokensToStorage","getAccessTokenFromStorage","getRefreshTokenFromStorage","axios","userApiStatusLogin","userApiRefreshToken","routeLogin","saveLogin","_ref","_asyncToGenerator","setLoading","navigation","loginStatus","verifyAccessTokenLogin","_unused","console","log","_x","_x2","apply","arguments","_ref2","token","response","get","headers","Authorization","statusLogin","data","redirectTo","handleTokenRefresh","_unused2","_x3","_ref3","refreshToken","post","accessToken","newRefreshToken","error","message","_x4"],"sources":["/Users/chuduchung/Documents/doan-reactnative/react-native-app/react-native-food/services/userService.tsx/saveLoginService.tsx"],"sourcesContent":["import { getLoginStatusToStorage,saveTokensToStorage, getAccessTokenFromStorage, getRefreshTokenFromStorage } from \"../../utils/TokenStorage\";\nimport axios from \"axios\";\nimport {userApiStatusLogin, userApiRefreshToken} from '../../api/UserAPI'\nimport { routeLogin } from './loginFunctions'\n\nexport const saveLogin = async (setLoading:(loading:boolean)=> void, navigation:any) => {\n    setLoading(true);\n    try{\n        const loginStatus = await getLoginStatusToStorage();\n\n       if(loginStatus === 'true') {\n            await verifyAccessTokenLogin(navigation);\n        }\n    }\n    catch{\n        console.log('Chưa ghi nhớ đăng nhập hoặc token không chính xác');\n    }\n    finally{\n        setLoading(false);\n    }\n    \n\n  };\n  \n  const verifyAccessTokenLogin = async (navigation:any ) => {\n      \n      try{\n        const token = await getAccessTokenFromStorage();\n        const response = await axios.get(userApiStatusLogin, {\n            headers: {\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        \n        const statusLogin = response.data.statusLogin;\n        \n        if (statusLogin) {     \n            if (statusLogin === true) {\n                console.log('Có ghi nhớ đăng nhập');\n                // await routeLoggedIn(token, navigation);\n                const redirectTo = 'ButtonBar'\n                await routeLogin(token, navigation, redirectTo)\n            }\n        }\n        else{\n            await handleTokenRefresh(navigation);\n            }\n        }\n    catch{\n        console.log('lỗi đăng nhập')\n    }\n}\n\n\nconst handleTokenRefresh = async ( navigation:any) => {\n    try {\n     const refreshToken = await getRefreshTokenFromStorage();\n      const response = await axios.post(userApiRefreshToken, {\n        refreshToken: refreshToken,\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      const accessToken = response.data.accessToken;\n      const newRefreshToken = response.data.refreshToken;\n  \n      console.log('accessToken:', accessToken);\n      console.log('refreshToken:', newRefreshToken);\n\n  \n      if (accessToken && newRefreshToken) {\n        saveTokensToStorage(accessToken, newRefreshToken);\n        const loginStatus = await getLoginStatusToStorage();\n        \n        await verifyAccessTokenLogin(navigation)\n     \n      }\n    } catch (error:any) {\n        console.log(error.message)\n    }\n     \n\n\n  };\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}